# Exercise 1: Read in data from file and return forest classifications
library(dplyr)
# Entry function to read in a file and separate out the data for each forest
loadForestFile <- function(fname){
# read in file as a data frame
forests = read.csv(fname)
# categorize trees as hardwoods or conifers for use in classification
forests$group = ifelse(forests$species %in% c("DF", "WH", "AF", "ES", "LP", "WP"), "conifer",
ifelse(forests$species %in% c("RA", "WA", "AS"), "hard", NA))
# initialize data frame to hold results
classified = data.frame(unit_id = unique(forests$unit_id), class = NA)
# loop through each unique forest in the file to get its classification
for(f in classified$unit_id){
# call the forest classification function and get its output
class = classifyForest(filter(forests, unit_id == f))
# add the results to the data frame
classified[classified$unit_id == f, "class"] = class
}
write.csv(classified, "classification.csv", row.names = F)
}
# Actual forest classification function
classifyForest <- function(forest){
# filter out the rows for trees that aren't conifers or hardwoods
forest = filter(forest, !is.na(group))
# then check if there are enough 20" and 12" conifers for class A
if(count(filter(forest, group == "conifer", dbh >= 20)) >= 10 &&
count(filter(forest, group == "conifer", dbh >= 12)) >= 20){
return("A")
}else if(count(filter(forest, group == "conifer", dbh >= 12)) >= 20){
# otherwise, check if there are enough 12" conifers for class B
return ("B")
}else if(count(filter(forest, group == "hard")) >= 10){
# otherwise, check if there are enough hardwoods for class C
return("C")
}else{
# if it meets none of the other standards, it's class D
return("D")
}
}
loadForestFile("trees.csv")
