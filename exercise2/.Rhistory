?nrow
# Exercise 2: read in file and classification system and output forest classifications
# Classification systems should be provided as a csv file in the format
# class name, requirement #1 set (i.e. hardwood or conifer), requirement #1 DBH threshold, requirement #1 number of trees, etc...
library(dplyr)
# Entry function to read in a file and separate out the data for each forest
loadForestFile <- function(fname, cname){
# read in both files as data frames
forests = read.csv(fname)
classes = read.csv(cname)
# categorize trees as hardwoods or conifers for use in classification
forests$group = ifelse(forests$species %in% c("DF", "WH", "AF", "ES", "LP", "WP"), "conifer",
ifelse(forests$species %in% c("RA", "WA", "AS"), "hardwood", NA))
# initialize data frame to hold results
classified = data.frame(unit_id = unique(forests$unit_id), class = NA)
# loop through each unique forest in the file to get its classification
for(f in classified$unit_id){
# call the forest classification function and get its output
class = classifyForest(filter(forests, unit_id == f), classes)
# add the results to the data frame
classified[classified$unit_id == f, "class"] = class
}
write.csv(classified, "classification.csv", row.names = F)
}
# Actual forest classification function
classifyForest <- function(forest, classes){
# filter out the rows for trees that aren't conifers or hardwoods
forest = filter(forest, !is.na(group))
# then loop through and check if the forest meets that classification
for(c in 1:nrow(classes)){
# for each classification loop through the requirements and check if the forest meets them
r = 2
while(r < ncol(classes)){
# if the forest doesn't meet the requirement, jump out of the while
if(count(filter(forest, group == classes[c, r], dbh >= classes[c, r+1])) < classes[c, r+2]){
break
}
# otherwise go to the next requirement
r = r+3
}
# if the while loop wasn't ended prematurely, this is the right classification and it can just return here
if(r >= ncol(classes)){
return(classes[c, 1])
}
}
# it should only get here if the forest doesn't meet any of the classifications
return("Unknown")
}
loadForestFile("trees.csv", "classes.csv")
# Exercise 2: read in file and classification system and output forest classifications
# Classification systems should be provided as a csv file in the format
# class name, requirement #1 set (i.e. hardwood or conifer), requirement #1 DBH threshold, requirement #1 number of trees, etc...
library(dplyr)
# Entry function to read in a file and separate out the data for each forest
loadForestFile <- function(fname, cname){
# read in both files as data frames
forests = read.csv(fname)
classes = read.csv(cname)
# categorize trees as hardwoods or conifers for use in classification
forests$group = ifelse(forests$species %in% c("DF", "WH", "AF", "ES", "LP", "WP"), "conifer",
ifelse(forests$species %in% c("RA", "WA", "AS"), "hardwood", NA))
# initialize data frame to hold results
classified = data.frame(unit_id = unique(forests$unit_id), class = NA)
# loop through each unique forest in the file to get its classification
for(f in classified$unit_id){
# call the forest classification function and get its output
class = classifyForest(filter(forests, unit_id == f), classes)
# add the results to the data frame
classified[classified$unit_id == f, "class"] = class
}
write.csv(classified, "classification.csv", row.names = F)
}
# Actual forest classification function
classifyForest <- function(forest, classes){
# filter out the rows for trees that aren't conifers or hardwoods
forest = filter(forest, !is.na(group))
# then loop through and check if the forest meets that classification
for(c in 1:nrow(classes)){
# for each classification loop through the requirements and check if the forest meets them
r = 2
while(r < ncol(classes)){
# if the forest doesn't meet the requirement, jump out of the while
print(classes[c, ])
if(count(filter(forest, group == classes[c, r], dbh >= classes[c, r+1])) < classes[c, r+2]){
break
}
# otherwise go to the next requirement
r = r+3
}
# if the while loop wasn't ended prematurely, this is the right classification and it can just return here
if(r >= ncol(classes)){
return(classes[c, 1])
}
}
# it should only get here if the forest doesn't meet any of the classifications
return("Unknown")
}
loadForestFile("trees.csv", "classes.csv")
# Exercise 2: read in file and classification system and output forest classifications
# Classification systems should be provided as a csv file in the format
# class name, requirement #1 set (i.e. hardwood or conifer), requirement #1 DBH threshold, requirement #1 number of trees, etc...
library(dplyr)
# Entry function to read in a file and separate out the data for each forest
loadForestFile <- function(fname, cname){
# read in both files as data frames
forests = read.csv(fname)
classes = read.csv(cname)
# categorize trees as hardwoods or conifers for use in classification
forests$group = ifelse(forests$species %in% c("DF", "WH", "AF", "ES", "LP", "WP"), "conifer",
ifelse(forests$species %in% c("RA", "WA", "AS"), "hardwood", NA))
# initialize data frame to hold results
classified = data.frame(unit_id = unique(forests$unit_id), class = NA)
# loop through each unique forest in the file to get its classification
for(f in classified$unit_id){
# call the forest classification function and get its output
class = classifyForest(filter(forests, unit_id == f), classes)
# add the results to the data frame
classified[classified$unit_id == f, "class"] = class
}
write.csv(classified, "classification.csv", row.names = F)
}
# Actual forest classification function
classifyForest <- function(forest, classes){
# filter out the rows for trees that aren't conifers or hardwoods
forest = filter(forest, !is.na(group))
# then loop through and check if the forest meets that classification
for(c in 1:nrow(classes)){
# for each classification loop through the requirements and check if the forest meets them
r = 2
while(r < ncol(classes) && !is.na(classes[c, r])){
# if the forest doesn't meet the requirement, jump out of the while
print(classes[c, ])
if(count(filter(forest, group == classes[c, r], dbh >= classes[c, r+1])) < classes[c, r+2]){
r = 0
break
}
# otherwise go to the next requirement
r = r+3
}
# if the while loop wasn't ended prematurely, this is the right classification and it can just return here
if(r != 0){
return(classes[c, 1])
}
}
# it should only get here if the forest doesn't meet any of the classifications
return("Unknown")
}
loadForestFile("trees.csv", "classes.csv")
# Exercise 2: read in file and classification system and output forest classifications
# Classification systems should be provided as a csv file in the format
# class name, requirement #1 set (i.e. hardwood or conifer), requirement #1 DBH threshold, requirement #1 number of trees, etc...
library(dplyr)
# Entry function to read in a file and separate out the data for each forest
loadForestFile <- function(fname, cname){
# read in both files as data frames
forests = read.csv(fname)
classes = read.csv(cname)
# categorize trees as hardwoods or conifers for use in classification
forests$group = ifelse(forests$species %in% c("DF", "WH", "AF", "ES", "LP", "WP"), "conifer",
ifelse(forests$species %in% c("RA", "WA", "AS"), "hardwood", NA))
# initialize data frame to hold results
classified = data.frame(unit_id = unique(forests$unit_id), class = NA)
# loop through each unique forest in the file to get its classification
for(f in classified$unit_id){
# call the forest classification function and get its output
class = classifyForest(filter(forests, unit_id == f), classes)
# add the results to the data frame
classified[classified$unit_id == f, "class"] = class
}
write.csv(classified, "classification.csv", row.names = F)
}
# Actual forest classification function
classifyForest <- function(forest, classes){
# filter out the rows for trees that aren't conifers or hardwoods
forest = filter(forest, !is.na(group))
# then loop through and check if the forest meets that classification
for(c in 1:nrow(classes)){
# for each classification loop through the requirements and check if the forest meets them
r = 2
print(classes[c, r])
while(r < ncol(classes) && !is.na(classes[c, r])){
# if the forest doesn't meet the requirement, jump out of the while
if(count(filter(forest, group == classes[c, r], dbh >= classes[c, r+1])) < classes[c, r+2]){
r = 0
break
}
# otherwise go to the next requirement
r = r+3
}
# if the while loop wasn't ended prematurely, this is the right classification and it can just return here
if(r != 0){
return(classes[c, 1])
}
}
# it should only get here if the forest doesn't meet any of the classifications
return("Unknown")
}
loadForestFile("trees.csv", "classes.csv")
# Exercise 2: read in file and classification system and output forest classifications
# Classification systems should be provided as a csv file in the format
# class name,requirement #1 set (i.e. hardwood or conifer),requirement #1 DBH threshold,requirement #1 number of trees,etc...
library(dplyr)
# Entry function to read in a file and separate out the data for each forest
loadForestFile <- function(fname, cname){
# read in both files as data frames
forests = read.csv(fname)
classes = read.csv(cname)
# categorize trees as hardwoods or conifers for use in classification
forests$group = ifelse(forests$species %in% c("DF", "WH", "AF", "ES", "LP", "WP"), "conifer",
ifelse(forests$species %in% c("RA", "WA", "AS"), "hardwood", NA))
# initialize data frame to hold results
classified = data.frame(unit_id = unique(forests$unit_id), class = NA)
# loop through each unique forest in the file to get its classification
for(f in classified$unit_id){
# call the forest classification function and get its output
class = classifyForest(filter(forests, unit_id == f), classes)
# add the results to the data frame
classified[classified$unit_id == f, "class"] = class
}
write.csv(classified, "classification.csv", row.names = F)
}
# Actual forest classification function
classifyForest <- function(forest, classes){
# filter out the rows for trees that aren't conifers or hardwoods
forest = filter(forest, !is.na(group))
# then loop through and check if the forest meets that classification
for(c in 1:nrow(classes)){
# for each classification loop through the requirements and check if the forest meets them
r = 2
while(r < ncol(classes) && !is.na(classes[c, r])){
# if the forest doesn't meet the requirement, jump out of the while
if(count(filter(forest, group == classes[c, r], dbh >= classes[c, r+1])) < classes[c, r+2]){
r = 0
break
}
# otherwise go to the next requirement
r = r+3
}
# if the while loop wasn't ended prematurely, this is the right classification and it can just return here
if(r != 0){
return(classes[c, 1])
}
}
# it should only get here if the forest doesn't meet any of the classifications
return("Unknown")
}
loadForestFile("trees.csv", "classes.csv")
# Exercise 2: read in file and classification system and output forest classifications
# Classification systems should be provided as a csv file in the format
# class name,requirement #1 set (i.e. hardwood or conifer),requirement #1 DBH threshold,requirement #1 number of trees,etc...
library(dplyr)
# Entry function to read in a file and separate out the data for each forest
loadForestFile <- function(fname, cname){
# read in both files as data frames
forests = read.csv(fname)
classes = read.csv(cname)
# categorize trees as hardwoods or conifers for use in classification
forests$group = ifelse(forests$species %in% c("DF", "WH", "AF", "ES", "LP", "WP"), "conifer",
ifelse(forests$species %in% c("RA", "WA", "AS"), "hardwood", NA))
# initialize data frame to hold results
classified = data.frame(unit_id = unique(forests$unit_id), class = NA)
# loop through each unique forest in the file to get its classification
for(f in classified$unit_id){
# call the forest classification function and get its output
class = classifyForest(filter(forests, unit_id == f), classes)
# add the results to the data frame
classified[classified$unit_id == f, "class"] = class
}
write.csv(classified, "classification.csv", row.names = F)
}
# Actual forest classification function
classifyForest <- function(forest, classes){
# filter out the rows for trees that aren't conifers or hardwoods
forest = filter(forest, !is.na(group))
# then loop through and check if the forest meets that classification
for(c in 1:nrow(classes)){
# for each classification loop through the requirements and check if the forest meets them
r = 2
while(r < ncol(classes) && !is.na(classes[c, r]) && classes[c, r] != ""){
# if the forest doesn't meet the requirement, jump out of the while
if(count(filter(forest, group == classes[c, r], dbh >= classes[c, r+1])) < classes[c, r+2]){
r = 0
break
}
# otherwise go to the next requirement
r = r+3
}
# if the while loop wasn't ended prematurely, this is the right classification and it can just return here
if(r != 0){
return(classes[c, 1])
}
}
# it should only get here if the forest doesn't meet any of the classifications
return("Unknown")
}
loadForestFile("trees.csv", "classes.csv")
# Exercise 2: read in file and classification system and output forest classifications
# Classification systems should be provided as a csv file in the format
# class name,requirement #1 set (i.e. hardwood or conifer),requirement #1 DBH threshold,requirement #1 number of trees,etc...
library(dplyr)
# Entry function to read in a file and separate out the data for each forest
loadForestFile <- function(fname, cname){
# read in both files as data frames
forests = read.csv(fname)
classes = read.csv(cname)
# categorize trees as hardwoods or conifers for use in classification
forests$group = ifelse(forests$species %in% c("DF", "WH", "AF", "ES", "LP", "WP"), "conifer",
ifelse(forests$species %in% c("RA", "WA", "AS"), "hardwood", NA))
# initialize data frame to hold results
classified = data.frame(unit_id = unique(forests$unit_id), class = NA)
# loop through each unique forest in the file to get its classification
for(f in classified$unit_id){
# call the forest classification function and get its output
class = classifyForest(filter(forests, unit_id == f), classes)
# add the results to the data frame
classified[classified$unit_id == f, "class"] = class
}
write.csv(classified, "classification.csv", row.names = F)
}
# Actual forest classification function
classifyForest <- function(forest, classes){
# filter out the rows for trees that aren't conifers or hardwoods
forest = filter(forest, !is.na(group))
# then loop through and check if the forest meets that classification
for(c in 1:nrow(classes)){
# for each classification loop through the requirements and check if the forest meets them
r = 2
while(r < ncol(classes) && !is.na(classes[c, r]) && classes[c, r] != ""){
# if the forest doesn't meet the requirement, jump out of the while
print(classes[c,])
print(filter(forest, group == classes[c, r], dbh >= classes[c, r+1])))
# Exercise 2: read in file and classification system and output forest classifications
# Classification systems should be provided as a csv file in the format
# class name,requirement #1 set (i.e. hardwood or conifer),requirement #1 DBH threshold,requirement #1 number of trees,etc...
library(dplyr)
# Entry function to read in a file and separate out the data for each forest
loadForestFile <- function(fname, cname){
# read in both files as data frames
forests = read.csv(fname)
classes = read.csv(cname)
# categorize trees as hardwoods or conifers for use in classification
forests$group = ifelse(forests$species %in% c("DF", "WH", "AF", "ES", "LP", "WP"), "conifer",
ifelse(forests$species %in% c("RA", "WA", "AS"), "hardwood", NA))
# initialize data frame to hold results
classified = data.frame(unit_id = unique(forests$unit_id), class = NA)
# loop through each unique forest in the file to get its classification
for(f in classified$unit_id){
# call the forest classification function and get its output
class = classifyForest(filter(forests, unit_id == f), classes)
# add the results to the data frame
classified[classified$unit_id == f, "class"] = class
}
write.csv(classified, "classification.csv", row.names = F)
}
# Actual forest classification function
classifyForest <- function(forest, classes){
# filter out the rows for trees that aren't conifers or hardwoods
forest = filter(forest, !is.na(group))
# then loop through and check if the forest meets that classification
for(c in 1:nrow(classes)){
# for each classification loop through the requirements and check if the forest meets them
r = 2
while(r < ncol(classes) && !is.na(classes[c, r]) && classes[c, r] != ""){
# if the forest doesn't meet the requirement, jump out of the while
print(classes[c,])
print(filter(forest, group == classes[c, r], dbh >= classes[c, r+1]))
if(count(filter(forest, group == classes[c, r], dbh >= classes[c, r+1])) < classes[c, r+2]){
r = 0
break
}
# otherwise go to the next requirement
r = r+3
}
# if the while loop wasn't ended prematurely, this is the right classification and it can just return here
if(r != 0){
return(classes[c, 1])
}
}
# it should only get here if the forest doesn't meet any of the classifications
return("Unknown")
}
loadForestFile("trees.csv", "classes.csv")
# Exercise 2: read in file and classification system and output forest classifications
# Classification systems should be provided as a csv file in the format
# class name,requirement #1 set (i.e. hardwood or conifer),requirement #1 DBH threshold,requirement #1 number of trees,etc...
library(dplyr)
# Entry function to read in a file and separate out the data for each forest
loadForestFile <- function(fname, cname){
# read in both files as data frames
forests = read.csv(fname)
classes = read.csv(cname, header = F)
# categorize trees as hardwoods or conifers for use in classification
forests$group = ifelse(forests$species %in% c("DF", "WH", "AF", "ES", "LP", "WP"), "conifer",
ifelse(forests$species %in% c("RA", "WA", "AS"), "hardwood", NA))
# initialize data frame to hold results
classified = data.frame(unit_id = unique(forests$unit_id), class = NA)
# loop through each unique forest in the file to get its classification
for(f in classified$unit_id){
# call the forest classification function and get its output
class = classifyForest(filter(forests, unit_id == f), classes)
# add the results to the data frame
classified[classified$unit_id == f, "class"] = class
}
write.csv(classified, "classification.csv", row.names = F)
}
# Actual forest classification function
classifyForest <- function(forest, classes){
# filter out the rows for trees that aren't conifers or hardwoods
forest = filter(forest, !is.na(group))
# then loop through and check if the forest meets that classification
for(c in 1:nrow(classes)){
# for each classification loop through the requirements and check if the forest meets them
r = 2
while(r < ncol(classes) && !is.na(classes[c, r]) && classes[c, r] != ""){
# if the forest doesn't meet the requirement, jump out of the while
if(count(filter(forest, group == classes[c, r], dbh >= classes[c, r+1])) < classes[c, r+2]){
r = 0
break
}
# otherwise go to the next requirement
r = r+3
}
# if the while loop wasn't ended prematurely, this is the right classification and it can just return here
if(r != 0){
return(classes[c, 1])
}
}
# it should only get here if the forest doesn't meet any of the classifications
return("Unknown")
}
loadForestFile("trees.csv", "classes.csv")
